from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes

def encrypt(plain_text, key):
    # Generate a random initialization vector (IV)
    iv = get_random_bytes(AES.block_size)
    
    # Create an AES cipher object with the provided key and AES.MODE_CBC mode
    cipher = AES.new(key, AES.MODE_CBC, iv)
    
    # Pad the plain text to match the block size of the cipher
    padded_plain_text = pad(plain_text, AES.block_size)
    
    # Encrypt the padded plain text
    encrypted_text = cipher.encrypt(padded_plain_text)
    
    # Return the IV and encrypted text as a tuple
    return iv + encrypted_text

def decrypt(encrypted_text, key):
    # Extract the IV from the encrypted text
    iv = encrypted_text[:AES.block_size]
    
    # Create an AES cipher object with the provided key, AES.MODE_CBC mode, and the extracted IV
    cipher = AES.new(key, AES.MODE_CBC, iv)
    
    # Decrypt the encrypted text
    decrypted_text = cipher.decrypt(encrypted_text[AES.block_size:])
    
    # Unpad the decrypted text
    unpadded_text = unpad(decrypted_text, AES.block_size)
    
    # Return the unpadded text
    return unpadded_text

# Example usage:
key = get_random_bytes(16)  # Generate a random 16-byte (128-bit) key
plaintext = b'This is a secret message.'

encrypted = encrypt(plaintext, key)
print('Encrypted text:', encrypted)

decrypted = decrypt(encrypted, key)
print('Decrypted text:', decrypted.decode('utf-8'))